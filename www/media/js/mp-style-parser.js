// Generated by CoffeeScript 1.3.3

/*
Maniaplanet-style-js-parser
Copyright (C) 2012 Baptiste Lafontaine (http://magnetik.org)

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/


(function() {
  var Color, LinkToken, LinkTokenEnd, MPStyle, Style, Token;

  Color = (function() {

    function Color() {}

    Color.hex2rgb = function(hex_color) {
      var color;
      color = parseInt(hex_color, 16);
      return [(color & 0xff0000) >> 16, (color & 0xff00) >> 8, color & 0xff];
    };

    Color.rgb12to24 = function(color) {
      return (color & 0xf00) * 0x1100 + (color & 0xf0) * 0x110 + (color & 0xf) * 0x11;
    };

    Color.rgbToLuminance = function(rgb) {
      return 0.2126 * Math.pow(rgb[0] / 255, 2.2) + 0.7151 * Math.pow(rgb[1] / 255, 2.2) + 0.0721 * Math.pow(rgb[2] / 255, 2.2);
    };

    Color.contrastRatio = function(rgb1, rgb2) {
      return (this.rgbToLuminance(this.hex2rgb(rgb1)) + 0.05) / (this.rgbToLuminance(this.hex2rgb(rgb2)) + 0.05);
    };

    return Color;

  })();

  Style = (function() {

    function Style() {}

    Style.COLORED = 0x1000;

    Style.ITALIC = 0x2000;

    Style.BOLD = 0x4000;

    Style.SHADOWED = 0x8000;

    Style.CAPITALIZED = 0x10000;

    Style.WIDE = 0x20000;

    Style.NARROW = 0x40000;

    return Style;

  })();

  Token = (function() {

    function Token(style, text) {
      this.style = style != null ? style : 0;
      this.text = text != null ? text : '';
    }

    Token.prototype.toHTML = function() {
      var color, styleStack;
      styleStack = [];
      if (this.style) {
        if (this.style & Style.COLORED) {
          color = parseInt(Color.rgb12to24(this.style & 0xfff), 10).toString(16);
          if (color.length === 2) {
            color = '0000' + color;
          } else if (color.length === 4) {
            color = '00' + color;
          }
          styleStack.push('color: #' + color + ';');
        }
        if (this.style & Style.ITALIC) {
          styleStack.push('font-style:italic;');
        }
        if (this.style & Style.BOLD) {
          styleStack.push('font-weight:bold;');
        }
        if (this.style & Style.SHADOWED) {
          styleStack.push('text-shadow:1px 1px 1px rgba(0, 0, 0, 0.5);');
        }
        if (this.style & Style.WIDE) {
          styleStack.push('letter-spacing:.1em;font-size:105%;');
        } else if (this.style & Style.NARROW) {
          styleStack.push('letter-spacing:-.1em;font-size:95%;');
        }
		if (this.style & Style.CAPITALIZED) {
		  this.text = this.text.toUpperCase();
		}
        return '<span style="' + styleStack.join(' ') + '">' + this.text + '</span>';
      } else {
        return this.text;
      }
    };

    return Token;

  })();

  LinkToken = (function() {

    function LinkToken(link) {
      this.link = link != null ? link : '';
    }

    LinkToken.prototype.toHTML = function() {
      return '<a href="' + this.link + '">';
    };

    return LinkToken;

  })();

  LinkTokenEnd = (function() {

    function LinkTokenEnd() {}

    LinkTokenEnd.prototype.toHTML = function() {
      return '</a>';
    };

    return LinkTokenEnd;

  })();

  MPStyle = (typeof exports !== "undefined" && exports !== null) && this || (this.MPStyle = {});

  MPStyle.Parser = (function() {

    function Parser(text) {
      return this.toHTML(text);
    }

    Parser.toHTML = function(text) {
      var tokens;
      return ((function() {
        var _i, _len, _ref, _results;
        _ref = this.parse(text);
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          tokens = _ref[_i];
          _results.push(tokens.toHTML());
        }
        return _results;
      }).call(this)).join('');
    };

    Parser.parse = function(text) {
      var c, color, endLink, endText, index, isCode, isPrettyLink, isQuickLink, linkLevel, nextLinkToken, nextToken, style, styleStack, tok, tokens, _i, _len, _ref, _ref1, _ref2;
      isCode = false;
      isQuickLink = false;
      isPrettyLink = false;
      style = 0;
      tokens = [];
      styleStack = [];
      nextToken = new Token;
      nextLinkToken = null;
      linkLevel = 0;
      endLink = function() {
        if (nextToken.text !== '') {
          tokens.push(nextToken);
          nextToken = new Token(style);
        }
		if (tokens[tokens.length - 1] === nextLinkToken) {
          delete tokens[tokens.length - 1];
        } else {
          tokens.push(new LinkTokenEnd);
        }
        nextLinkToken = null;
        isQuickLink = false;
        return isPrettyLink = false;
      };
      endText = function(force) {
        if (force == null) {
          force = false;
        }
        if (force || style !== nextToken.style) {
          if (nextToken.text !== '') {
            tokens.push(nextToken);
            return nextToken = new Token(style);
          } else {
            return nextToken.style = style;
          }
        }
      };
      _ref = text.split('');
      for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
        c = _ref[index];
        if (isCode === true) {
          tok = c.toLowerCase();
          switch (tok) {
            case 'i':
              style = style ^ Style.ITALIC;
              break;
            case 'o':
              style = style ^ Style.BOLD;
              break;
            case 's':
              style = style ^ Style.SHADOWED;
              break;
            case 'w':
              style = style | Style.WIDE;
              style = style & ~Style.NARROW;
              break;
            case 'n':
              style = style | Style.NARROW;
              style = style & ~Style.WIDE;
              break;
			case 't':
			  style = style ^ Style.CAPITALIZED;
			  break;
            case 'l':
            case 'h':
            case 'p':
              if (nextLinkToken != null) {
                endLink();
              } else {
                endText(true);
                nextLinkToken = new LinkToken;
                tokens.push(nextLinkToken);
                isQuickLink = true;
                isPrettyLink = true;
                linkLevel = styleStack.length;
              }
              break;
            case 'z':
              style = (_ref1 = styleStack.length === 0) != null ? _ref1 : {
                0: styleStack[styleStack.length - 1]
              };
              if (nextLinkToken != null) {
                endLink();
              }
              break;
            case 'm':
              style = style & ~(Style.NARROW | Style.WIDE);
              break;
            case 'g':
              style = style & ((_ref2 = styleStack.length === 0) != null ? _ref2 : ~{
                0x1fff: styleStack[styleStack.length(-1)] | ~0x1fff
              });
              break;
            case '<':
              styleStack.push(style);
              break;
            case '>':
              if (styleStack.length !== 0) {
                style = styleStack.pop();
                if ((nextLinkToken != null) && linkLevel > styleStack.length) {
                  endLink();
                }
              }
              break;
            case '$':
              nextToken.text += '$';
              break;
            default:
              if (/[a-f0-9]/i.test()) {
                color = c;
              }
          }
          endText();
          isCode = false;
        } else if (c === '$') {
          isCode = true;
          if (isQuickLink && isPrettyLink) {
            isPrettyLink = false;
          }
        } else if (color != null) {
          color += c.replace(/[^a-f0-9]/gi, '0');
          if (color.length === 3) {
            style = style & ~0xfff;
            style = style | Style.COLORED | (parseInt(color, 16) & 0xfff);
            endText();
            color = null;
          }
        } else if (isQuickLink && isPrettyLink) {
          if (c === '[') {
            isQuickLink = false;
          } else {
            isPrettyLink = false;
            nextToken.text += c;
            nextLinkToken.link += c;
          }
        } else if (isPrettyLink) {
          if (c === ']') {
            isPrettyLink = false;
          } else {
            nextLinkToken.link += c;
          }
        } else {
          nextToken.text += c;
          if (isQuickLink) {
            nextLinkToken.link += c;
          }
        }
      }
      if (nextToken.text !== '') {
        tokens.push(nextToken);
      }
      return tokens;
    };

    return Parser;

  })();

}).call(this);